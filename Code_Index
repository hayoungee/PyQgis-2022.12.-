

###### 1. Add or Remove Vector Layer ######

# Add Vector Layer
fn="C:/Users/User/Desktop/지역분류체계/urban_emd_20/인구격자읍면동_20_부산/original"
layer = iface.addVectorLayer(fn, '', 'ogr')

## encoding
layer.setProviderEncoding(u'UTF-8')
layer.dataProvider().setEncoding(u'UTF-8')


# Remove Vector Layer
QgsProject.instance().removeMapLayer('id값')

## Remove All Layer
QgsProject.instance().removeAllMapLayers()


#Check layer (show layer's id)
## 레이어 조회: id 알 수 있음
QgsProject.instance().mapLayers()





###### 2. Create Graduated Symbol Render ######

from PyQt5 import QtGui
my_file = 'C:/~~'
myVectorLayer = QgsVectorLayer(my_file,"", "ogr")
myTargetField = 'TOT'
myRangeList = []
myOpacity = 0.6
# Make our first symbol and range...
myMin = 0.0
myMax = 299.0
myLabel = 'Group 1'
myColour = QtGui.QColor('yellow')
mySymbol1 = QgsSymbol.defaultSymbol(myVectorLayer.geometryType())
mySymbol1.setColor(myColour)
mySymbol1.setOpacity(myOpacity)
myRange1 = QgsRendererRange(myMin, myMax, mySymbol1, myLabel)
myRangeList.append(myRange1)
#now make another symbol and range...
myMin = 300.0
myMax = 1499.0
myLabel = 'Group 2'
myColour = QtGui.QColor('blue')
mySymbol2 = QgsSymbol.defaultSymbol(myVectorLayer.geometryType())
mySymbol2.setColor(myColour)
mySymbol2.setOpacity(myOpacity)
myRange2 = QgsRendererRange(myMin, myMax, mySymbol2, myLabel)
myRangeList.append(myRange2)

myMin = 1500.0
myMax = 9999999999
myLabel = 'Group 3'
myColour = QtGui.QColor('red')
mySymbol3 = QgsSymbol.defaultSymbol(myVectorLayer.geometryType())
mySymbol3.setColor(myColour)
mySymbol3.setOpacity(myOpacity)
myRange3 = QgsRendererRange(myMin, myMax, mySymbol3, myLabel)
myRangeList.append(myRange3)


myRenderer = QgsGraduatedSymbolRenderer('', myRangeList)
myRenderer.setMode(QgsGraduatedSymbolRenderer.EqualInterval)
myRenderer.setClassAttribute(myTargetField)

myVectorLayer.setRenderer(myRenderer)
QgsProject.instance().addMapLayer(myVectorLayer)





###### 3. Add New Field ######

from PyQt5.QtCore import QVariant

layer=iface.activeLayer()
layer_provider=layer.dataProvider()
layer_provider.addAttributes([QgsField("new_field_name",QVariant.Int)])
layer.updateFields()





###### 4. Create Making Cluster ######

from qgis.utils import iface
from PyQt5.QtCore import QVariant


_NAME_FIELD = 'GRID_1K_CD'
_MIN_ID_FIELD = 'min_id'
# Names of the new fields to be added to the layer
_NEW_NEIGHBORS_FIELD = 'neighbors_'
_ID_FIELD = 'id'
_FLAG_FIELD = 'flag'

layer = iface.activeLayer()

layer.startEditing()

# Create a dictionary of all features
feature_dict = {f.id(): f for f in layer.getFeatures()}

my_list_a=[]
my_list_b=[]
my_list=[]


for a in feature_dict.values():
    for b in feature_dict.values():
        print ('Working on %s and %s' % (a[_NAME_FIELD], b[_NAME_FIELD]))
    # Initalize neighbors list and sum
        neighbors = []
        
        if (a[_ID_FIELD] != b[_ID_FIELD]):  ##비교 대상이 자신이 아니고
            if (a.attributes()[14] == 0 and b.attributes()[14] == 0 ):  ##통합 되지 않은 격자 중 
                my_list_a = str(a.attributes()[17]) 
                my_list_a = my_list_a.split(',')
                print("My list : %s" %my_list_a)
                for i in range(len(my_list_a)):  ##a의 neighbors_를 돌면서 
                    number=my_list_a[i]  ##a의 i번째 이웃
                    my_list_b = str(b.attributes()[17])
                    my_list_b = my_list_b.split(',')
                    
                    if((number in my_list_b) and (a[_FLAG_FIELD] == 0 )and (b[_FLAG_FIELD] == 0)): ##만약 b의 neighbors_ 중에 a의 원소가 있고, flag==0 이라면 
                        print("common number is %s" %number)
                        print("My list b : %s " %b.attributes()[17])
                        my_list_b = b.attributes()[17].split(',')
                        my_list_a = a.attributes()[17].split(',')
                        ##print(my_list_a)
                        ##print(my_list_b)
                        my_list= my_list_a + my_list_b
                        ##
                        print(my_list)
                        new_list=[]
                        for v in my_list:
                            if v not in new_list:
                                new_list.append(v)
                        print("%s 의 new list : %s" %(b[_NAME_FIELD], new_list))
                        a[_FLAG_FIELD] = 1
                        ##b[_NEW_NEIGHBORS_FIELD] = new_list
                        b[_NEW_NEIGHBORS_FIELD]=','.join(map(str,new_list))
                        layer.updateFeature(a)
                        layer.updateFeature(b)

    print(" ")

##layer.commitChanges()
print ('Processing complete.')





###### 5. Select & Export Features ######

# selecte features
layer = iface.activeLayer()

#put your expression in ' '
layer.selectByExpression('"TOT">1500',QgsVectorLayer.SetSelection)


# export selected features

#write down your file path and file name like this 'C:/Users/User/myfile.shp'
my_file=''

#QgsVectorFileWriter.writeAsVectorFormat(layer,my_file,"encoding",layer.crs(),"file format", option)
_writer=QgsVectorFileWriter.writeAsVectorFormat(layer,my_file,"EUC-KR",layer.crs(),"ESRI Shapefile", onlySelected=True)





###### 6. Save as Shape File ######

layer = iface.activeLayer()
path = 'C:/Users/User/Desktop/지역분류체계/urban_emd_20/test/savingTest.shp'
_writer = QgsVectorFileWriter.writeAsVectorFormat(layer,path,'utf-8',driverName='ESRI Shapefile')
